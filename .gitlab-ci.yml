variables:
  GITLAB_CI_IMAGE_ALPINE: 'alpine:3.9'
  GITLAB_CI_IMAGE_PYTHON2: 'python:2'
  GITLAB_CI_IMAGE_PYTHON3: 'python:3'
  GITLAB_CI_PYPI_TOX: 'tox~=3.8.0'
  GITLAB_CI_PYPI_TWINE: 'twine~=1.13.0'
stages:
  - static
  - build
  - test
  - deploy
static:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON2}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "py2-flake8,isort,yapf,py2-pylint,robot-lint"
static3:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON3}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "py3-{flake8,pylint}"
docs:
  stage: build
  image: ${GITLAB_CI_IMAGE_PYTHON3}
  before_script:
    - pip install sphinx_rtd_theme
  script:
    - cd doc
    - make html SPHINXOPTS="-W"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - doc/_build/html
build:
  stage: build
  image: ${GITLAB_CI_IMAGE_PYTHON2}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf dist
    - tox -e "py2-build"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - dist
build3:
  stage: build
  image: ${GITLAB_CI_IMAGE_PYTHON3}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf dist
    - tox -e "py3-build"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - dist
test:
  stage: test
  image: ${GITLAB_CI_IMAGE_PYTHON2}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf robot/output
    - tox -e "py2-robot"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - robot/output
test3:
  stage: test
  image: ${GITLAB_CI_IMAGE_PYTHON3}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf robot/output
    - tox -e "py3-robot"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - robot/output
deploy:
  stage: deploy
  image: ${GITLAB_CI_IMAGE_PYTHON2}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TWINE"
  script:
    - rm -rf dist
    - python setup.py sdist bdist_wheel
    - twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" dist/*
  only:
    refs:
      - tags
    variables:
      - $PYPI_USERNAME
      - $PYPI_PASSWORD
pages:
  stage: deploy
  image: ${GITLAB_CI_IMAGE_ALPINE}
  script:
    - mv doc/_build/html/ public/
  artifacts:
    paths:
      - public
  only:
    - tags
